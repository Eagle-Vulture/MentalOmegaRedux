name: Update XNA CnCNet Client

on:
  workflow_dispatch:
  schedule:
  - cron: "0 0 * * *"

env:
  REPO_NAME: MentalOmegaRedux
  CLIENT_PATH: Source\CLIENT
  UPDATE_BRANCH_NAME: update-client-binaries
  COMMIT_MESSAGE: Update client binaries to the latest version
  PR_TITLE: Update client binaries to the version
  PR_BODY: This is an automatic pull request to update client binaries triggered from CnCNet/xna-cncnet-client repository.

jobs:
  publish-update-pr:
    runs-on: windows-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        lfs: true
    
    - name: Download Latest Release
      id: download
      uses: robinraju/release-downloader@v1
      with:
        repository: CnCNet/xna-cncnet-client
        latest: true
        fileName: xna-cncnet-client*

    - name: Open PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $currentVersion = (Get-Item -Path "D:\a\${{ env.REPO_NAME }}\${{ env.REPO_NAME }}\Resources\clientdx.exe").VersionInfo.FileVersion -Replace "\.0$", ""
        $downloadVersion = '${{ steps.download.outputs.tag_name }}'
        
        echo "Current client version: '$currentVersion'"
        echo "Downloaded client version: '$downloadVersion'"

        if ($currentVersion -eq $downloadVersion)
        {
          echo "Update doesn't required"
        } else
        {
          echo "Update required"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Remove old branch if exist and make new one
          git branch -D ${{ env.UPDATE_BRANCH_NAME }}
          git checkout -b ${{ env.UPDATE_BRANCH_NAME }}
        
          # Delete old binaries, unpack archive, remove archive
          rm -r -fo "D:\a\${{ env.REPO_NAME }}\${{ env.REPO_NAME }}\Resources\Binaries"
          rm -r -fo "D:\a\${{ env.REPO_NAME }}\${{ env.REPO_NAME }}\Resources\BinariesNET8"
          7z x xna-cncnet-client-*.7z -y -oD:\a\${{ env.REPO_NAME }}\${{ env.REPO_NAME }}
          rm xna-cncnet-client-*.7z

          # Commit changes
          git commit -am "${{ env.COMMIT_MESSAGE }}"

          # Path to the updateexec file
          $updateExecPath = "D:\a\${{ env.REPO_NAME }}\${{ env.REPO_NAME }}\${{ env.CLIENT_PATH }}\updateexec"

          # Check if the updateexec file exists
          if (-Not (Test-Path -Path $updateExecPath))
          {
            echo "The file 'updateexec' does not exist. Skip updating [Delete] section."
          }
          else
          {
            # Get the deleted and moved files from git diff
            $deletedFiles = git diff --diff-filter=D --name-status HEAD~1 HEAD | Where-Object { $_.StartsWith('D') } | ForEach-Object { $_.Substring(1).Trim().Replace('/', '\') }
            $deletedFiles += [Environment]::NewLine
            $deletedFiles += git diff --diff-filter=R --name-status --diff-filter=R HEAD~1 HEAD | Where-Object { $_.StartsWith('R100') } | ForEach-Object { $_.Substring(4).Trim().Split(' ')[0].Replace('/', '\') }

            # Check if there are any deleted files
            if ($deletedFiles.Count -eq 0)
            {
                echo "No deleted files found in the git diff. Skip updating [Delete] section."
            }
            else
            {
              # Read the content of the updateexec file
              $updateexecContent_old = Get-Content -Path $updateExecPath
              $updateexecContent_new = ""

              # Find the [Delete] section and its position
              $deleteSectionIndex = $updateexecContent_old.IndexOf("[Delete]")

              if ($deleteSectionIndex -eq -1)
              {
                $updateexecContent_old += [Environment]::NewLine 
                $updateexecContent_old += "[Delete]"
                $deleteSectionIndex = $updateexecContent_old.IndexOf("[Delete]")
              }

              # Exclude path from string for config
              $exclude = "${{ env.CLIENT_PATH }}"

              # Iterate all content of old updateexec
              foreach($old_line in $updateexecContent_old)
              {
                $index = $updateexecContent_old.IndexOf($old_line)
                $updateexecContent_new += $old_line + [Environment]::NewLine

                # If we find section [Delete], add new deleted files
                if ($deleteSectionIndex -eq $index)
                {
                  $updateexecContent_new += "; ${{ steps.download.outputs.tag_name }} (auto-generated entries for removed/renamed files)" + [Environment]::NewLine
                  foreach($new_delete in $deletedFiles)
                  {
                    $file = $new_delete
                    if ($exclude.Length -eq 0)
                    {
                      $file = $new_delete
                    }
                    else
                    {
                      if ($file.StartsWith($exclude + '\'))
                      {
                        $file = ($new_delete.Remove(0, ($exclude.Length + 1)))
                      }
                      else
                      {
                        $file = $new_delete
                      }
                    }
                    $updateexecContent_new += $file + [Environment]::NewLine
                  }
                  $updateexecContent_new += "; end entries" + [Environment]::NewLine + [Environment]::NewLine
                }
              }

              # Save the modified content back to the file
              $updateexecContent_new | Set-Content -Path $updateExecPath
            }
          }

          # Commit changes if there exist updateexec and client binaries have new deleted files
          git commit --amend -am "${{ env.COMMIT_MESSAGE }}"

          # Push changes
          git push --force origin ${{ env.UPDATE_BRANCH_NAME }}

          # Open PR
          timeout /t 10 > nul
          gh pr create -B main -H ${{ env.UPDATE_BRANCH_NAME }} --title '${{ env.PR_TITLE }} ${{ steps.download.outputs.tag_name }}' --body '${{ env.PR_BODY }}'
        }
